# vi: set ft=yaml.ansible :
- name: "Create the Ansible Directory"
  hosts:
    - debian
    - redhat
  tasks:
    - name: "Setup Context."
      ansible.builtin.include_tasks: "./context.yaml"
- name: Update and Upgrade, Required Deps
  become: true
  hosts:
    - debian
    - redhat
  tasks:
    - name: Install Basic Utilities
      become: true
      ansible.builtin.package:
        name:
          - git
          - curl
          - wget
          - g++
          - cmake
          - ca-certificates
          - unzip
        state: present
- name: Debian Specific Basic Installs.
  hosts: debian
  gather_facts: false
  tasks:
    - name: Debian Sepcific Installs
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-venv
        state: present
- name: (Debian) Add Docker and Docker Compose
  hosts:
    - debian
  become: true
  gather_facts: false
  vars:
    gpg_key: "{{ artifacts.base }}/docker.asc"
    repo: https://download.docker.com/linux/debian
  tasks:
    - name: "Check Docker Install"
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_stat
    - name: "Install Docker"
      when: not docker_stat.stat.exists
      block:
        - name: Check for Deb Config
          ansible.builtin.stat:
            path: /etc/apt/keyring
          register: keyring_stat
        - name: Generate Deb Config
          when: keyring_stat.stat.exists
          block:
            - name: Create keyring directory
              ansible.builtin.file:
                path: /etc/apt/keyring
                mode: "0755"
                owner: root
                group: root
            - name: Download the GPG Key
              ansible.builtin.get_url:
                url: https://download.docker.com/linux/debian/gpg
                dest: "{{ gpg_key }}"
                mode: "0644"
                owner: ansible
                group: ansible
            - name: Install the GPG Key.
              ansible.builtin.copy:
                src: "{{ gpg_key }}"
                dest: /etc/apt/keyrings/docker.asc
                mode: "0644"
                owner: root
                group: root
            - name: Read and parse .env file
              ansible.builtin.set_fact:
                os_release: "{{ lookup('file', '/os/release') | splitlines | select('match', '^[A-Z_]+=') | map('split', '=', 1) | list | dict }}"
            - name: Check the `VERSION_CODENAME` is defined.
              when: not os_release.VERSION_CODENAME
              ansible.builtin.fail:
                msg: "`VERSION_CODENAME` was not found in `/os.release`."
            - name: Add Docker Repository
              ansible.builtin.copy:
                mode: "0644"
                owner: root
                group: root
                dest: /etc/apt/sources.list.d/docker.list
                content: >
                  deb [arch={{ ansible_architecture }} signed-by={{ gpg_key }}] {{repo}} {{ os_release.VERSION_CODENAME }} stable

        - name: Install Docker Container Engine
          apt:
            state: present
            update_cache: true
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
- name: (RedHat) Add Docker and Docker Compose
  hosts:
    - redhat
  gather_facts: false
  become: true
  vars:
    repo_config: "{{ artifacts.base }}/docker-ce.repo"
  tasks:
    - name: Check Docker Installed
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_stat
    - name: Install Docker
      when: not docker_stat.stat.exists
      block:
        - name: Uninstall Existing Depends
          ansible.builtin.dnf:
            state: absent
            name:
              - docker
              - docker-client
              - docker-client-latest
              - docker-common
              - docker-latest
              - docker-latest-logrotate
              - docker-logrotate
              - docker-engine
              - podman
              - runc
        - name: "Add Core Plugins for DNF"
          ansible.builtin.dnf:
            state: present
            name:
              - dnf-plugins-core
        - name: "Get Repo Configuration."
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/rhel/docker-ce.repo
            dest: "{{ repo_config }}"
            mode: "0644"
            owner: ansible
            group: ansible
        - name: "Provide Repo Configuration."
          ansible.builtin.copy:
            src: "{{ repo_config }}"
            remote_src: true
            dest: "/etc/yum.repos.d"
            mode: "0644"
            owner: root
            group: root
        - name: "Install Docker"
          ansible.builtin.dnf:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
- name: (Common) Add Docker and Docker Compose
  hosts: [redhat, debian]
  gather_facts: false
  tasks:
    - name: "Start Docker"
      become: true
      # ansible.builtin.systemd_service:
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started
    - name: Add users to the Docker Group
      ansible.builtin.user:
        user: "{{ user }}"
        groups: docker
- name: Add Quarto
  hosts:
    - redhat
    - debian
  gather_facts: false
  become: true
  vars:
    quarto_archive: "{{ artifacts.base }}/quarto.tar"
    quarto_version: "1.8.24"
    quarto_opt: "/opt/quarto-{{ quarto_version }}"
    quarto_binary: "{{ quarto_opt }}/bin/quarto"
    quarto_checksum: sha256:6b83c1c9b6f2ce6454798b42260bd2ee184551d74debe817b8aaf28b09ac22d0
  tasks:
    - name: "Check if Installed"
      ansible.builtin.stat:
        path: "{{ quarto_binary }}"
      register: quarto_binary_stat
    - when: not quarto_binary_stat.stat.exists
      block:
        - name: Get Quarto tarball
          ansible.builtin.get_url:
            url: https://github.com/quarto-dev/quarto-cli/releases/download/v{{ quarto_version }}/quarto-{{ quarto_version }}-linux-amd64.tar.gz
            checksum: "{{ quarto_checksum }}"
            dest: "{{ quarto_archive }}"
            mode: "0644"
        - name: Untar Quarto
          become: true
          ansible.builtin.unarchive:
            remote_src: true
            dest: "/opt"
            creates: "{{ quarto_opt }}"
            src: "{{ quarto_archive }}"
            mode: "0644"
        - name: Quarto Symlink
          become: true
          ansible.builtin.file:
            src: "{{ quarto_binary }}"
            dest: /usr/local/bin/quarto
            state: link
# - name: Add NVM
#   hosts: all
#   tasks:
#     - name: Get NVM Installer
#       ansible.builtin.get_url:
#         url: https://raw.githubusercontent.com/nvm-sh/nvm/refs/tags/v0.40.3/install.sh
#         checksum: 2d8359a64a3cb07c02389ad88ceecd43f2fa469c06104f92f98df5b6f315275f
#         dest: "{{ user.homedir }}/ansible/install-nvm.sh"
#     - name: Run NVM Installer
#       if: ""
#       ansible.builtin.shell: bash "{{ user.homedir }}/ansible/install-nvm.sh"
# - name: Add PyEnv
#   hosts: all
#   tasks:
#     - name: Get PyEnv Installer
#       ansible.builtin.git:
#         repo: https://github.com/pyenv/pyenv.git
#         clone: yes
#         dest: "{{ user.homedir }}/.pyenv"
#         depth: 1
#         version: v2.6.8
#     - name: What was I supposed to do with this git repository?
- name: ArgoCD
  hosts:
    - redhat
    - debian
  # vars:
  #   argocd: 'tools.argocd'
  gather_facts: false
  tasks:
    - name: Download ArgoCD into bin
      become: true
      ansible.builtin.get_url:
        # url: https://github.com/argoproj/argo-cd/releases/download/v3.1.9/argocd-darwin-amd64
        url: https://github.com/{{ tools.argocd.repo }}/releases/download/v{{ tools.argocd.version }}/argocd-linux-{{ arch }}
        checksum: '{{ tools.argocd.checksum }}'
        dest: /usr/local/bin/argocd
        # All for by owner and group. Executable and readable for others.
        mode: '0775'
- name: Add Helm
  hosts:
    - redhat
    - debian
  gather_facts: false
  vars:
    helm_archive: "{{ artifacts.base }}/helm.tar.gz"
    helm_unarchive: "{{ artifacts.base }}/helm"
    helm_binary: "/usr/local/bin/helm"
  tasks:
    - name: Check Helm Installed
      ansible.builtin.stat:
        path: "{{ helm_binary }}"
      register: helm_binary_stat
    - name: Install Helm
      when: not helm_binary_stat.stat.exists
      block:
        - name: Download Helm
          ansible.builtin.get_url:
            url: https://get.helm.sh/helm-v{{ tools.helm.version }}-linux-{{ arch }}.tar.gz
            checksum: '{{ tools.helm.checksum }}'
            dest: '{{ helm_archive }}'
            mode: "0644"
        - name: Create Helm Archive Folder
          ansible.builtin.file:
            path: '{{ helm_unarchive }}'
            state: "directory"
            mode: "0644"
            # mode: directory
        - name: Extract Helm
          become: true
          ansible.builtin.unarchive:
            remote_src: true
            creates: '{{ helm_unarchive }}/linux-amd64'
            dest: '{{ helm_unarchive }}/'
            src: '{{ helm_archive }}'
            mode: "0644"
        - name: Move Helm
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: '{{ helm_unarchive }}/linux-amd64/helm'
            dest: '{{ helm_binary }}'
            mode: '0755'
- name: Add KubeCtl
  hosts:
    - redhat
    - debian
  gather_facts: false
  become: true
  tasks:
    - name: Download KubeCtl into bin
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/v{{ tools.kubectl.version }}/bin/linux/{{ arch }}/kubectl
        checksum: "{{ tools.kubectl.checksum }}"
        dest: /usr/local/bin/kubectl
        mode: '0775'
- name: Add Terraform
  hosts:
    - redhat
    - debian
  gather_facts: false
  vars:
    tf_basename: "terraform_{{ tools.terraform.version }}"
    tf_baseurl: "https://releases.hashicorp.com/terraform/{{ tools.terraform.version }}"
    tf_shasums: "{{artifacts.base }}/{{ tf_basename }}_SHA256SUMS"
    tf_archive_name: "{{ tf_basename }}_linux_{{ arch }}.zip"
    tf_archive: "{{ artifacts.base }}/{{ tf_archive_name }}"
    tf_unarchive: "{{ artifacts.base }}/terraform"
    tf_binary: "/usr/local/bin/tf"
    hc_pgpkey: "{{ artifacts.base }}/hc.txt"
    tf_shasums_select_pattern: ".*{{ tf_archive_name }}"
    tf_url: "{{ tf_baseurl }}/{{ tf_archive_name }}"
  tasks:
    - name: Check Terraform Install
      ansible.builtin.stat:
        path: "{{ tf_binary }}"
      register: tf_binary_stat
    - name: Install Terraform
      when: not tf_binary_stat.stat.exists
      block:
        - name: Get Shasum
          block:
            - name: Download Shasums
              ansible.builtin.get_url:
                url: '{{ tf_baseurl }}/{{ tf_basename }}_SHA256SUMS'
                dest: '{{ tf_shasums }}'
                mode: "0644"
            - name: Read ShaSums
              ansible.builtin.slurp:
                src: '{{ tf_shasums }}'
              register: tf_shasums_file
            - name: Decoded
              block:
                - name: Set `tf_shasums_decoded`
                  ansible.builtin.set_fact:
                    tf_shasums_decoded: '{{ tf_shasums_file.content | b64decode }}'
                - name: Show `tf_shasums_decoded`
                  ansible.builtin.debug:
                    var: tf_shasums_decoded
            - name: "Split"
              block:
                - name: Set `tf_shasums_split`
                  ansible.builtin.set_fact:
                    tf_shasums_split: "{{ tf_shasums_decoded | split('\n')  }}"
                - name: Show `tf_shasums_split`
                  ansible.builtin.debug:
                    var: tf_shasums_split
            - name: Select
              block:
                - name: Set `tf_shasums_select`
                  ansible.builtin.set_fact:
                    tf_shasums_select: "{{ tf_shasums_split | select('match', tf_shasums_select_pattern )  }}"
                - name: Show `tf_shasums_select`
                  ansible.builtin.debug:
                    var: tf_shasums_select_pattern
                    # - ansible.builtin.debug:
                    #     var: tf_shasums_select
            - name: Unwrap `tf_shasums_select`
              ansible.builtin.set_fact:
                tf_shasum: "{{ tf_shasums_select | first | split | first }}"
        - name: Download Terraform
          ansible.builtin.get_url:
            url: '{{ tf_url }}'
            dest: '{{ tf_archive }}'
            mode: "0644"
            checksum: "{{ tools.terraform.checksum }}"
        - name: Create Terraform Archive Folder
          ansible.builtin.file:
            state: "directory"
            path: "{{ tf_unarchive }}"
            mode: "0644"
        - name: Extract Terraform
          become: true
          ansible.builtin.unarchive:
            remote_src: true
            creates: '{{ tf_unarchive }}/terraform'
            dest: '{{ tf_unarchive }}'
            src: '{{ tf_archive }}'
            mode: "0644"
        - name: Move Terraform into bin
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: '{{ tf_unarchive }}/terraform'
            dest: '{{ tf_binary }}'
            mode: '0775'
