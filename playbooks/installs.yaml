# vi: set ft=yaml.ansible :
- name: "Create the Ansible Directory"
  hosts:
    - debian
    - redhat
  tasks:
    - name: "Setup Context."
      ansible.builtin.include_tasks: "./context.yaml"
- name: Update and Upgrade, Required Deps
  become: true
  hosts:
    - debian
    - redhat
  tasks:
    - name: Install Basic Utilities
      become: true
      ansible.builtin.package:
        name:
          - git
          - curl
          - wget
          - g++
          - cmake
          - ca-certificates
        state: present
- name: Debian Specific Basic Installs.
  hosts: debian
  tasks:
    - name: Debian Sepcific Installs
      ansible.builtin.apt:
        name:
          - python3-pip
          - python3-venv
        state: present
- name: (Debian) Add Docker and Docker Compose
  hosts:
    - debian
  become: true
  vars:
    gpg_key: "{{ artifacts.base }}/docker.asc"
    repo: https://download.docker.com/linux/debian
  tasks:
    - name: "Check Docker Install"
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_stat
    - name: "Install Docker"
      when: not docker_stat.stat.exists
      block:
        - name: Check for Deb Config
          ansible.builtin.stat:
            path: /etc/apt/keyring
          register: keyring_stat
        - name: Generate Deb Config
          when: keyring_stat.stat.exists
          block:
            - name: Create keyring directory
              ansible.builtin.file:
                path: /etc/apt/keyring
                mode: "0755"
                owner: root
                group: root
            - name: Download the GPG Key
              ansible.builtin.get_url:
                url: https://download.docker.com/linux/debian/gpg
                dest: "{{ gpg_key }}"
                mode: "0644"
                owner: ansible
                group: ansible
            - name: Install the GPG Key.
              ansible.builtin.copy:
                src: "{{ gpg_key }}"
                dest: /etc/apt/keyrings/docker.asc
                mode: "0644"
                owner: root
                group: root
            - name: Read and parse .env file
              ansible.builtin.set_fact:
                os_release: "{{ lookup('file', '/os/release') | splitlines | select('match', '^[A-Z_]+=') | map('split', '=', 1) | list | dict }}"
            - name: Check the `VERSION_CODENAME` is defined.
              when: not os_release.VERSION_CODENAME
              ansible.builtin.fail:
                msg: "`VERSION_CODENAME` was not found in `/os.release`."
            - name: Add Docker Repository
              ansible.builtin.copy:
                mode: "0644"
                owner: root
                group: root
                dest: /etc/apt/sources.list.d/docker.list
                content: >
                  deb [arch={{ ansible_architecture }} signed-by={{ gpg_key }}] {{repo}} {{ os_release.VERSION_CODENAME }} stable

        - name: Install Docker Container Engine
          apt:
            state: present
            update_cache: true
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
- name: (RedHat) Add Docker and Docker Compose
  hosts:
    - redhat
  gather_facts: false
  become: true
  vars:
    repo_config: "{{ artifacts.base }}/docker-ce.repo"
  tasks:
    - name: Check Docker Installed
      ansible.builtin.stat:
        path: /usr/bin/docker
      register: docker_stat
    - name: Install Docker
      when: not docker_stat.stat.exists
      block:
        - name: Uninstall Existing Depends
          ansible.builtin.dnf:
            state: absent
            name:
              - docker
              - docker-client
              - docker-client-latest
              - docker-common
              - docker-latest
              - docker-latest-logrotate
              - docker-logrotate
              - docker-engine
              - podman
              - runc
        - name: "Add Core Plugins for DNF"
          ansible.builtin.dnf:
            state: present
            name:
              - dnf-plugins-core
        - name: "Get Repo Configuration."
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/rhel/docker-ce.repo
            dest: "{{ repo_config }}"
            mode: "0644"
            owner: ansible
            group: ansible
        - name: "Provide Repo Configuration."
          ansible.builtin.copy:
            src: "{{ repo_config }}"
            remote_src: true
            dest: "/etc/yum.repos.d"
            mode: "0644"
            owner: root
            group: root
        - name: "Install Docker"
          ansible.builtin.dnf:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
- name: (Common) Add Docker and Docker Compose
  hosts: [redhat, debian]
  gather_facts: false
  tasks:
    - name: "Start Docker"
      become: true
      # ansible.builtin.systemd_service:
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started
    - name: Add users to the Docker Group
      ansible.builtin.user:
        user: "{{ user }}"
        groups: docker
- name: Add Quarto
  hosts: all
  remote_user: "{{ user.username }}"
  tasks:
    - name: Get Quarto tarball
      ansible.builtin.get_url:
        url: https://github.com/quarto-dev/quarto-cli/releases/download/v1.8.24/quarto-1.8.24-linux-amd64.tar.gz
        checksum: 6b83c1c9b6f2ce6454798b42260bd2ee184551d74debe817b8aaf28b09ac22d0
        dest: "{{ user.homedir }}/Ansible/quarto.tar"
    - name: Untar Quarto
      become: true
      ansible.builtin.unarchive:
        creates: "/opt/quarto"
        dest: "/opt/quarto"
        src: "{{ user.homedir }}/Ansible/quarto.tar"
    - name: Quarto Symlink
      become: true
      ansible.builtin.shell: ln -s /opt/quarto/bin/quarto /bin/quarto
- name: Add NVM
  hosts: all
  tasks:
    - name: Get NVM Installer
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/refs/tags/v0.40.3/install.sh
        checksum: 2d8359a64a3cb07c02389ad88ceecd43f2fa469c06104f92f98df5b6f315275f
        dest: "{{ user.homedir }}/ansible/install-nvm.sh"
    - name: Run NVM Installer
      if: ""
      ansible.builtin.shell: bash "{{ user.homedir }}/ansible/install-nvm.sh"
- name: Add PyEnv
  hosts: all
  tasks:
    - name: Get PyEnv Installer
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv.git
        clone: yes
        dest: "{{ user.homedir }}/.pyenv"
        depth: 1
        version: v2.6.8
    - name: What was I supposed to do with this git repository?
- name: ArgoCD
  hosts: all
  vars:
    argocd: 'tools.argocd'
  tasks:
    - name: Download ArgoCD into bin
      become: true
      ansible.builtin.get_url:
        url: https://github.com/{{ argocd.repo }}/releases/download/{{ argocd.version }}/argocd-linux-{{ arch }}
        checksum: '{{ argocd.checksum }}'
        dest: /usr/local/bin
        # All for by owner and group. Executable and readable for others.
        mode: '0775'
- name: Add Helm
  vars:
    helm: 'tools.helm'
    dest-archive: "{{ user.homedir }}/archives/helm.tar.gz"
    dest-unarchive: "{{ user.homedir }}/archives/helm"
  tasks:
    - name: Download Helm
      ansible.builtin.get_url:
        url: https://get.helm.sh/helm-v{{ version }}-linux-{{ arch }}.tar.gz
        checksum: '{{ argocd.checksum }}'
        dest: '{{ dest-archive }}'
    - name: Extract Helm
      ansible.builtin.unarchive:
        dest: '{{ dest-unarchive }}'
        src: '{{ dest-archive }}'
    - name: Move Helm
      become: true
      ansible.builtin.copy:
        src: '{{ dest-unarchive }}/helm'
        dest: '/usr/local/bin'
        checksum: '{{ argocd.checksum }}'
        mode: '0775'
- name: Add KubeCtl
  hosts: all
  vars:
    kubectl: 'tools.kubectl'
  tasks:
    - name: Download KubeCtl into bin
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/v{{ kubectl.version }}/bin/linux/{{ arch }}/kubectl"
        checksum: "{{ kubectl.checksum }}"
        dest: /usr/local/bin
        mode: '0775'
- name: Add Terraform
  hosts: all
  vars:
    terraform: 'tools.terraform'
    dest-archive: "{{ user.homedir }}/archives/terraform.zip"
    dest-unarchive: "{{ user.homedir }}/archives/terraform"
  tasks:
    - name: Download Terraform
      ansible.builtin.get_url:
        url: https://releases.hashicorp.com/terraform/{{ terraform.version }}/terraform_{{ terraform.version }}_linux_{{ arch }}.zip
        dest: '{{ dest-archive }}'
    - name: Extract Terraform
      ansible.builtin.unarchive:
        dest: '{{ dest-archive }}'
        src: '{{ dest-archive }}'
    - name: Move Terraform into bin
      become: true
      ansible.builtin.copy:
        src: '{{ dest-archive }}/terraform'
        mode: '0775'
