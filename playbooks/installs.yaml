# vi: set ft=yaml.ansible :
- name: "Create the Ansible Directory"
  hosts: debian
  remote_user: "{{ user.username }}"
  tasks:
    - name: Prepare the ansible directory.
      ansible.builtin.shell: "mkdir --parent {{ user.homedir }}/Ansible/Build"
- name: Update and Upgrade, Required Deps
  become: true
  hosts: all
  tasks:
    - name: Apt Update
      ansible.builtin.shell: apt update
      become: true
    - name: Apt Upgrade
      ansible.builtin.shell: apt upgrade --yes
      become: true
    - name: Apt Install Required
      become: true
      apt:
        name:
          - git
          - python3-pip
          - python3-venv
          - curl
          - cmake
          - ca-certificates
        state: latest
        update_cache: true
- name: Add Docker and Docker Compose
  hosts: debian
  become: true
  tasks:
    - name: Create keyring directory
      ansible.builtin.shell: install -m 0755 -d /etc/apt/keyrings
    - name: Download the GPG key
      ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    - name: Set permissions on the key
      ansible.builtin.shell: sudo chmod a+r /etc/apt/keyrings/docker.asc
    - name: Add Docker Repository
      ansible.builtin.shell: |
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    - name: Update apt and install docker-ce
      apt:
        state: latest
        update_cache: true
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
    - name: Install Docker Module for Python
      pip:
        name: docker
- name: Add Quarto
  hosts: all
  remote_user: "{{ user.username }}"
  tasks:
    - name: Get Quarto tarball
      ansible.builtin.get_url:
        url: https://github.com/quarto-dev/quarto-cli/releases/download/v1.8.24/quarto-1.8.24-linux-amd64.tar.gz
        checksum: 6b83c1c9b6f2ce6454798b42260bd2ee184551d74debe817b8aaf28b09ac22d0
        dest: "{{ user.homedir }}/Ansible/quarto.tar"
    - name: Untar Quarto
      become: true
      ansible.builtin.unarchive:
        creates: "/opt/quarto"
        dest: "/opt/quarto"
        src: "{{ user.homedir }}/Ansible/quarto.tar"
    - name: Quarto Symlink
      become: true
      ansible.builtin.shell: ln -s /opt/quarto/bin/quarto /bin/quarto
- name: Add NVM
  hosts: all
  tasks:
    - name: Get NVM Installer
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/refs/tags/v0.40.3/install.sh
        checksum: 2d8359a64a3cb07c02389ad88ceecd43f2fa469c06104f92f98df5b6f315275f
        dest: "{{ user.homedir }}/ansible/install-nvm.sh"
    - name: Run NVM Installer
      if: ""
      ansible.builtin.shell: bash "{{ user.homedir }}/ansible/install-nvm.sh"
- name: Add PyEnv
  hosts: all
  tasks:
    - name: Get PyEnv Installer
      ansible.builtin.git:
        repo: https://github.com/pyenv/pyenv.git
        clone: yes
        dest: "{{ user.homedir }}/.pyenv"
        depth: 1
        version: v2.6.8
    - name: What was I supposed to do with this git repository?
- name: ArgoCD
  hosts: all
  vars:
    argocd: 'tools.argocd'
  tasks:
    - name: Download ArgoCD into bin
      become: true
      ansible.builtin.get_url:
        url: https://github.com/{{ argocd.repo }}/releases/download/{{ argocd.version }}/argocd-linux-{{ arch }}
        checksum: '{{ argocd.checksum }}'
        dest: /usr/local/bin
        # All for by owner and group. Executable and readable for others.
        mode: '0775'
- name: Add Helm
  vars:
    helm: 'tools.helm'
    dest-archive: "{{ user.homedir }}/archives/helm.tar.gz"
    dest-unarchive: "{{ user.homedir }}/archives/helm"
  tasks:
    - name: Download Helm
      ansible.builtin.get_url:
        url: https://get.helm.sh/helm-v{{ version }}-linux-{{ arch }}.tar.gz
        checksum: '{{ argocd.checksum }}'
        dest: '{{ dest-archive }}'
    - name: Extract Helm
      ansible.builtin.unarchive:
        dest: '{{ dest-unarchive }}'
        src: '{{ dest-archive }}'
    - name: Move Helm
      become: true
      ansible.builtin.copy:
        src: '{{ dest-unarchive }}/helm'
        dest: '/usr/local/bin'
        checksum: '{{ argocd.checksum }}'
        mode: '0775'
- name: Add KubeCtl
  hosts: all
  vars:
    kubectl: 'tools.kubectl'
  tasks:
    - name: Download KubeCtl into bin
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/v{{ kubectl.version }}/bin/linux/{{ arch }}/kubectl"
        checksum: "{{ kubectl.checksum }}"
        dest: /usr/local/bin
        mode: '0775'
- name: Add Terraform
  hosts: all
  vars:
    terraform: 'tools.terraform'
    dest-archive: "{{ user.homedir }}/archives/terraform.zip"
    dest-unarchive: "{{ user.homedir }}/archives/terraform"
  tasks:
    - name: Download Terraform
      ansible.builtin.get_url:
        url: https://releases.hashicorp.com/terraform/{{ terraform.version }}/terraform_{{ terraform.version }}_linux_{{ arch }}.zip
        dest: '{{ dest-archive }}'
    - name: Extract Terraform
      ansible.builtin.unarchive:
        dest: '{{ dest-archive }}'
        src: '{{ dest-archive }}'
    - name: Move Terraform into bin
      become: true
      ansible.builtin.copy:
        src: '{{ dest-archive }}/terraform'
        mode: '0775'
